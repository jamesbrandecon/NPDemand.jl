# This file shows an example of how to compare estimated to true product fixed effects 
# This is meant both to show that we can hit the true values and to show how to extract the estimated values from the results

using Plots
using NPDemand

# Simulate data
J = 4; # of products
T = 5000; # # of markets
beta = -1; # price coefficient
sdxi = 0.25; # standard deviation of xi

# Simulate data and convert to DataFrame
# NOTE: productFEs are generated deterministically here to allow comparing estimated and true FEs over many iterations
# Randomness across samples is generated by the random draws of xi, x, p, and z
s, p, z, x, xi, product_FEs  = simulate_logit(J, T, beta, sdxi, with_product_FEs = true);
df = toDataFrame(s,p,z,x,product_FEs);

# Specify estimation/model parameters
bO = 2; 
exchange = [[1 2 3 4]]
index_vars = ["prices", "x"]
constraint_tol = 1e-5;
obj_xtol = 1e-5;
obj_ftol = 1e-5;

constraints = [:exchangeability, :monotone];
npd_problem = define_problem(df; 
                            exchange = exchange, 
                            index_vars = index_vars, 
                            constraints = constraints,
                            bO = bO,
                            FE = ["product"],
                            constraint_tol = constraint_tol,
                            obj_xtol = obj_xtol,
                            obj_ftol = obj_ftol);
show(npd_problem)

# Estimate problem and plot comparison of estimated and true own-price elasticities
estimate!(npd_problem, linear_solver = "Ipopt") 

# True product FEs are stored in the DataFrame df. They are not normalized so we add normalization here. 
true_FEs = Matrix(unique(df[!,r"productFE"]));
true_FEs = true_FEs .- true_FEs[1];
true_FEs = true_FEs[2:end];

# Estimated product FEs are added to the end of the parameter vector. Thhey are also normalized so that one 
# (ideally the first, but possibly arbitrarily chosen) product's FE is normalized to zero. If there are two exchangeable groups, then 
# two product FEs are normalized.
estimated_FEs = npd_problem.results.minimizer[end-(J-2):end];

println("Estimated product FEs:")
display(round.(estimated_FEs, digits=3))

println("True product FEs:")
display(true_FEs)